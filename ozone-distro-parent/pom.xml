<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>com.ozonehis</groupId>
    <artifactId>ozone-parent</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <relativePath>../ozone-parent</relativePath>
  </parent>

  <artifactId>ozone-distro-parent</artifactId>
  <name>Ozone Distribution Parent</name>
  <version>1.0.0-SNAPSHOT</version>
  <packaging>pom</packaging>
  <description>Parent project for Ozone distributions</description>

  <organization>
    <name>Ozone HIS</name>
    <url>https://www.ozone-his.com</url>
  </organization>

  <developers>
    <developer>
      <name>Mekom Solutions</name>
      <url>https://www.mekomsolutions.com</url>
    </developer>
  </developers>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <ozone.version>1.0.0-SNAPSHOT</ozone.version>
  </properties>

  <dependencies>
    <dependency>
      <groupId>com.ozonehis</groupId>
      <artifactId>ozone</artifactId>
      <type>zip</type>
      <version>${ozone.version}</version>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <!-- Unpack Ozone zip -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>Unpack Ozone</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>unpack-dependencies</goal>
            </goals>
            <configuration>
              <excludeTransitive>true</excludeTransitive>
              <outputDirectory>${project.build.directory}/ozone</outputDirectory>
              <includeArtifactIds>ozone</includeArtifactIds>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
         <execution>
            <!-- Exclude files from Ozone -->
            <id>Exclude unneeded Ozone files</id>
            <phase>process-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>
                ${project.build.directory}/${project.artifactId}-${project.version}</outputDirectory>
              <overwrite>true</overwrite>
              <resources>
                <resource>
                  <directory>${project.build.directory}/ozone</directory>
                  <excludes>
                    <exclude>distro/**/addresshierarchy/*.*</exclude>
                    <exclude>distro/**/ampathforms/*.json</exclude>
                    <exclude>distro/**/ampathformstranslations/*.json</exclude>
                    <exclude>distro/**/globalproperties/i18n.xml</exclude>
                    <exclude>distro/**/*demo.*</exclude>
                  </excludes>
                </resource>
              </resources>
            </configuration>
          </execution>

          <execution>
            <!-- Copy reference-application-spa-assemble-config.json to frontend working directory -->
            <id>Copy reference-application-spa-assemble-config.json to local working directory</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/openmrs_frontend</outputDirectory>
              <overwrite>true</overwrite>
              <resources>
                <resource>
                  <directory>${project.build.directory}/ozone/distro/configs/openmrs/frontend_assembly</directory>
                  <filtering>false</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>

          <execution>
            <!-- Copy local spa-assemble-config.json if any -->
            <id>Copy spa-assemble-config.json</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>
                ${project.build.directory}/openmrs_frontend
              </outputDirectory>
              <overwrite>true</overwrite>
              <resources>
                <resource>
                  <directory>${project.basedir}/configs/openmrs/frontend_assembly</directory>
                  <includes>
                    <include>spa-assemble-config.json</include>
                  </includes>
                  <filtering>false</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>

          <execution>
            <!-- Copy and substitute some helper files (for demo and Gitpod) -->
            <id>Copy and substitute some helper files</id>
            <phase>process-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/</outputDirectory>
              <overwrite>true</overwrite>
              <resources>
                <resource>
                  <directory>${project.basedir}/.mvn</directory>
                  <filtering>false</filtering>
                </resource>
                <resource>
                  <directory>${project.basedir}</directory>
                  <includes>
                    <include>mvnw</include>
                    <include>mvnw.cmd</include>
                  </includes>
                  <filtering>false</filtering>
                </resource>
                <resource>
                  <directory>${project.basedir}/scripts</directory>
                  <filtering>false</filtering>
                </resource>
                <resource>
                  <directory>${project.basedir}/scripts</directory>
                  <includes>
                    <include>*.sh</include>
                  </includes>
                  <excludes>
                    <exclude>start-ozone.sh</exclude>
                  </excludes>
                  <filtering>true</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>

          <execution>
            <!-- Copy the docker-compose-files.txt file to set the services to run -->
            <id>Copy docker-compose-files.txt</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>
                ${project.build.directory}/${project.artifactId}-${project.version}/run/docker/scripts</outputDirectory>
              <overwrite>true</overwrite>
              <resources>
                <resource>
                  <directory>${project.basedir}/scripts</directory>
                  <includes>
                    <include>docker-compose-files.txt</include>
                    <include>start-ozone.sh</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>

          <execution>
            <!-- Override with local config files-->
            <id>Copy local resources</id>
            <phase>process-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>
                ${project.build.directory}/${project.artifactId}-${project.version}/distro/configs</outputDirectory>
              <overwrite>true</overwrite>
              <resources>
                <resource>
                  <directory>${project.basedir}/configs</directory>
                  <excludes>
                    <exclude>.gitkeep</exclude>
                  </excludes>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.codehaus.gmavenplus</groupId>
        <artifactId>gmavenplus-plugin</artifactId>
        <version>3.0.2</version>
        <executions>
          <execution>
            <id>Rebuild OpenMRS Frontend if necessary</id>
            <goals>
              <goal>execute</goal>
            </goals>
            <phase>process-classes</phase>
            <configuration>
              <scripts>
                <script><![CDATA[
                  import java.nio.file.Paths

                  log.info("Checking for frontend customizations in ${Paths.get("${project.build.directory}", "openmrs_frontend", "spa-assemble-config.json").toString()}")

                  frontendCustomizationsFile = Paths.get("${project.build.directory}", "openmrs_frontend", "spa-assemble-config.json").toFile()
                  if (frontendCustomizationsFile.exists()) {
                    log.info("Found frontend customizations. Rebuilding frontend...")

                    refAppConfigFile = Paths.get("${project.build.directory}", "openmrs_frontend", "reference-application-spa-assemble-config.json").toFile()
                    slurper = new groovy.json.JsonSlurper()
                    refAppConfig = slurper.parse(refAppConfigFile)
                    openmrsVersion = refAppConfig["coreVersion"]

                    def assembleProcess = "npx --legacy-peer-deps openmrs@${openmrsVersion} assemble --manifest --mode config --config ${refAppConfigFile.getAbsolutePath()} --config ${frontendCustomizationsFile.getAbsolutePath()} --target ${project.build.directory}/${project.artifactId}-${project.version}/binaries/openmrs/frontend".execute()
                    assembleProcess.consumeProcessOutput(System.out, System.err)
                    assembleProcess.waitFor()

                    if (assembleProcess.exitValue() != 0) {
                      throw new RuntimeException("'openmrs assemble' step failed. See previous messages for details.")
                    }

                    def buildProcess = "npx --legacy-peer-deps openmrs@${openmrsVersion} build --config-url "\$SPA_CONFIG_URLS" --default-locale "\$SPA_DEFAULT_LOCALE" --target ${project.build.directory}/${project.artifactId}-${project.version}/binaries/openmrs/frontend".execute()
                    buildProcess.consumeProcessOutput(System.out, System.err)
                    buildProcess.waitFor()

                    if (buildProcess.exitValue() != 0) {
                      throw new RuntimeException("'openmrs build' step failed. See previous messages for details.")
                    }
                  } else {
                    log.info("No frontend customizations found.")
                  }
                ]]></script>
              </scripts>
            </configuration>
          </execution>
        </executions>
        <dependencies>
          <dependency>
            <groupId>org.apache.groovy</groupId>
            <artifactId>groovy</artifactId>
            <version>4.0.18</version>
            <scope>runtime</scope>
          </dependency>
          <dependency>
            <groupId>org.apache.groovy</groupId>
            <artifactId>groovy-ant</artifactId>
            <version>4.0.18</version>
            <scope>runtime</scope>
          </dependency>
          <dependency>
            <groupId>org.apache.groovy</groupId>
            <artifactId>groovy-json</artifactId>
            <version>4.0.18</version>
            <scope>runtime</scope>
          </dependency>
        </dependencies>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>validator</id>
      <activation>
        <property>
          <name>env.CI</name>
          <value>true</value>
        </property>
      </activation>
      <build>
        <plugins>

          <!-- hooking the OpenMRS config validation to the integration-test phase -->
          <plugin>
            <groupId>org.openmrs.maven.plugins</groupId>
            <artifactId>openmrs-packager-maven-plugin</artifactId>
          </plugin>

        </plugins>
      </build>
    </profile>
  </profiles>

  <distributionManagement>
    <repository>
      <name>Mekom Solutions Nexus repo for releases</name>
      <id>mks-nexus-public-releases</id>
      <url>https://nexus.mekomsolutions.net/repository/maven-releases</url>
    </repository>
    <snapshotRepository>
      <name>Mekom Solutions Nexus repo for snapshots</name>
      <id>mks-nexus-public-snapshots</id>
      <url>https://nexus.mekomsolutions.net/repository/maven-snapshots</url>
    </snapshotRepository>
  </distributionManagement>
</project>
